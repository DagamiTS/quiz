{"version":3,"sources":["images/bg.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestion","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCart","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdaf6bbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.b3298233.jpg\";","import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: Array<string>;\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: Array<string> };\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestion = async (amount: number, difficulty: Difficulty) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=18&type=multiple&difficulty=${difficulty}`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([ ...question.incorrect_answers, question.correct_answer ])\r\n  }));\r\n};","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  \r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  \r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  \r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n\r\n//'linear-gradient(90deg, #56ffa4, #59bc86'\r\n//'linear-gradient(90deg, #ff5656, #c16868'\r\n//'linear-gradient(90deg, #56ccff, #6eafb4'","import React from 'react';\r\n// Types\r\nimport { AnswerObject } from '../App';\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: Array<string>;\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCart: React.FC<Props> = ({\r\n                                         question,\r\n                                         answers,\r\n                                         callback,\r\n                                         userAnswer,\r\n                                         questionNr,\r\n                                         totalQuestions\r\n                                       }) => {\r\n  // @ts-ignore\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map(answer => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCart;","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/bg.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  \r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  \r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', sans-serif;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  \r\n  > p {\r\n    color: #fff;\r\n  }\r\n  \r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  \r\n  h1 {\r\n    font-family: Fascinate Inline, sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  \r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  \r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;","import React, { useState } from 'react';\n\nimport { fetchQuizQuestion } from './API';\n// Components\nimport QuestionCart from './components/QuestionCard';\n// Types\nimport { QuestionState, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [ loading, setLoading ] = useState(false);\n  const [ questions, setQuestions ] = useState<Array<QuestionState>>([]);\n  const [ number, setNumber ] = useState(0);\n  const [ userAnswers, setUserAnswers ] = useState<Array<AnswerObject>>([]);\n  const [ score, setScore ] = useState(0);\n  const [ gameOver, setGameOver ] = useState(true);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestion(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // Users answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [ ...prev, answerObject ]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ?\n          <button className=\"start\" onClick={startQuiz}>Start</button>\n          : null\n        }\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions ...</p>}\n        {!loading && !gameOver && <QuestionCart\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 &&\n        <button className=\"next\" onClick={nextQuestion}>Next Question</button>}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}